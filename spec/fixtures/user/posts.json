{"resp":[{"id":86427,"tiny_id":"YPj","post_type":"link","post_url":"http:\/\/forrst.com\/posts\/Forrst_API_in_Ruby-YPj","created_at":"2011-06-05 01:28:36","updated_at":"2011-06-05 01:42:46","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"285","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Forrst API in Ruby","url":"https:\/\/github.com\/YorickPeterse\/Forrst","content":"","description":"With the recent announcement of the API I figured I had to join the party as well and decided to start working on a Ruby implementation. The idea of this implementation is that it should focus on stability, support for all popular Ruby distributions (JRuby, Rubinius, etc) and most important of all: it should be easy to use. The latter means that rather than having some crappy wrapper around a JSON response you'll end up with an implementation that looks vaguely like [Sequel][sequel] or other DBM toolkits.\r\n\r\nCurrently not a lot is working, in fact you can only retrieve a user, but below are a few examples of how you'll be using the library once it's fully operational.\r\n\r\n    require 'forrst'\r\n\r\n    # Forrst::User.find(1) is also perfectly fine if you happen to know the ID\r\n    kyle = Forrst::User.find('kyle')\r\n\r\n    kyle.post_count # => 426\r\n    kyle.developer? # => true\r\n    \r\n    kyle.posts.each do |post|\r\n      puts post.title\r\n    end\r\n\r\n    Forrst::Post.find(:code, :sort => :recent, :page => 1).each do |post|\r\n      puts post.title\r\n    end\r\n\r\nThere are a few important things to remember before you're going nuts and try to use the gem. First of all it's not doing a lot at this moment besides retrieving a user. Second, I'll most likely change quite a bit in the coming days as OAuth authentication will be enabled, SSL will be used and so on. Last but not least, don't bother suggestion feature X, Y or Z as at this point I'm still designing (no, I don't use Photoshop) the structure of the code and how to use it.\r\n\r\nNevertheless it's worth a look, the project can be found by clicking the link of this article (hint: it's at the top).\r\n\r\n[sequel]: http:\/\/sequel.rubyforge.org\/\r\n\r\np.s. Yes, I have permission of Kyle to use the name \"forrst\" ;)","formatted_content":"\n\n","formatted_description":"\n<p>With the recent announcement of the API I figured I had to join\nthe party as well and decided to start working on a Ruby\nimplementation. The idea of this implementation is that it should\nfocus on stability, support for all popular Ruby distributions\n(JRuby, Rubinius, etc) and most important of all: it should be easy\nto use. The latter means that rather than having some crappy\nwrapper around a JSON response you'll end up with an implementation\nthat looks vaguely like <a href=\"http:\/\/sequel.rubyforge.org\/\"\ntarget=\"_blank\" class=\"external\">Sequel<\/a> or other DBM\ntoolkits.<\/p>\n<p>Currently not a lot is working, in fact you can only retrieve a\nuser, but below are a few examples of how you'll be using the\nlibrary once it's fully operational.<\/p>\n<div class=\"code inline\">\n<pre class=\"prettyprint\">\nrequire 'forrst'\n\n# Forrst::User.find(1) is also perfectly fine if you happen to know the ID\nkyle = Forrst::User.find('kyle')\n\nkyle.post_count # =&gt; 426\nkyle.developer? # =&gt; true\n\nkyle.posts.each do |post|\n  puts post.title\nend\n\nForrst::Post.find(:code, :sort =&gt; :recent, :page =&gt; 1).each do |post|\n  puts post.title\nend\n<\/pre>\n<div class=\"raw\"><a target=\"_blank\" href=\n\"\/raw_code\/fe8a4edebba4668555639004b9f1192891049028\">Raw<\/a><\/div>\n<\/div>\n<p>There are a few important things to remember before you're going\nnuts and try to use the gem. First of all it's not doing a lot at\nthis moment besides retrieving a user. Second, I'll most likely\nchange quite a bit in the coming days as OAuth authentication will\nbe enabled, SSL will be used and so on. Last but not least, don't\nbother suggestion feature X, Y or Z as at this point I'm still\ndesigning (no, I don't use Photoshop) the structure of the code and\nhow to use it.<\/p>\n<p>Nevertheless it's worth a look, the project can be found by\nclicking the link of this article (hint: it's at the top).<\/p>\n<p>p.s. Yes, I have permission of Kyle to use the name \"forrst\"\n;)<\/p>\n\n","like_count":"7","comment_count":"0","tag_string":"forrst api,api,ruby,forrst,jruby,rubin","tags":["api","forrst","forrst api","JRuby","rubin","ruby"]},{"id":80317,"tiny_id":"9ow","post_type":"code","post_url":"http:\/\/forrst.com\/posts\/Mixins_in_PHP_5_3-9ow","created_at":"2011-05-10 09:31:24","updated_at":"2011-05-10 12:11:24","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"285","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Mixins in PHP 5.3","url":"","content":"<?php\r\n\r\nnamespace OOPHP;\r\n\r\nuse OOPHP\\Exception\\ArgumentException;\r\nuse OOPHP\\Exception\\MethodException;\r\n\r\n\/**\r\n * Base class that should be extended by all other classes. This class isn't really useful \r\n * on it's own but provides a few common methods that can be used by sub classes.\r\n * \r\n * One of the most important and most interesting features provided by this class is the\r\n * ability to use mixins that affect both new and existing instances of the class. For \r\n * more information on this see OOPHP\\_Object::implement().\r\n *\r\n * @author Yorick Peterse\r\n * @since  0.1\r\n *\/\r\nclass _Object\r\n{\r\n    \/**\r\n     * Associative array containing all the objects and functions that have to be \r\n     * implemented (also known as mixins) into every instance.\r\n     *\r\n     * @author Yorick Peterse\r\n     * @since  0.1\r\n     * @access private\r\n     * @var    array\r\n     *\/\r\n    private static $mixins = array();\r\n\r\n    \/**\r\n     * Implements the given object or function into the the class itself. This affects \r\n     * both existing instances as well as new ones.\r\n     *\r\n     * @example\r\n     *  OOPHP\\_Object::implement('upcase', function($instance)\r\n     *  {\r\n     *      return strtoupper($instance->value);\r\n     *  });\r\n     *\r\n     * @author  Yorick Peterse\r\n     * @since   0.1\r\n     * @acccess public\r\n     * @param   object|string $name If set to a string this variable will be used as the\r\n     * name when importing a closure. If it's an object all it's methods will be mixed\r\n     * into every instance of this class.\r\n     * @param   Closure $closure If specified this closure will be stored in \r\n     * self::$mixins using the name specified in $name. This variable is ignored if \r\n     * $name is an object. The first argument of this closure will always be a reference \r\n     * to the instance of the class that called it.\r\n     * @trow    OOPHP\\Exception\\ArgumentException Thrown whenever a closure was missing \r\n     * and no object was specified as the first parameter.\r\n     *\/\r\n    public static function implement($name, $closure = NULL)\r\n    {\r\n        $class = self::get_class();\r\n\r\n        if ( !isset(self::$mixins[$class]) )\r\n        {\r\n            self::$mixins[$class] = array();\r\n        }\r\n\r\n        if ( is_object($name) )\r\n        {\r\n            foreach ( get_class_methods($name) as $method )\r\n            {\r\n                self::$mixins[$class][$method] = $name;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if ( empty($closure) )\r\n            {\r\n                throw new ArgumentException(\"You need to specify a closure\");\r\n            }\r\n\r\n            self::$mixins[$class][$name] = $closure;\r\n        }\r\n    }\r\n\r\n    \/**\r\n     * Returns the class name of the current instance.\r\n     *\r\n     * @author Yorick Peterse\r\n     * @since  0.1\r\n     * @access public\r\n     * @return string\r\n     *\/\r\n    public function class_name()\r\n    {\r\n        return self::get_class($this);\r\n    }\r\n\r\n    \/**\r\n     * Method that's executed when the called method didn't exist. This method will try to\r\n     * see if there are any mixed in methods that match the called one and call those \r\n     * instead. If no methods are found MethodException will be raised.\r\n     *\r\n     * @author Yorick Peterse\r\n     * @since  0.1\r\n     * @access public\r\n     * @param  string $method The name of the method that was called.\r\n     * @param  array $params An array of parameters that were sent to the method.\r\n     * @return mixed\r\n     * @throw  OOPHP\\Exception\\MethodException Thrown whenever the method wasn't mixed in \r\n     * and didn't exist either.\r\n     *\/\r\n    public function __call($method, $params)\r\n    {\r\n        \/\/ Set the current instance as the first parameter. This allows closures to modify \r\n        \/\/ and use data from the instance.\r\n        $params = array_merge(array($this), $params);\r\n        $class  = self::get_class($this);\r\n\r\n        if ( isset(self::$mixins[$class][$method]) )\r\n        {\r\n            $mixin = self::$mixins[$class][$method];\r\n\r\n            \/\/ Closures are objects but can't be called as an instance of something\r\n            if ( is_object($mixin) AND strtolower(get_class($mixin)) !== 'closure' )\r\n            {\r\n                $mixin = array($mixin, $method);\r\n            }\r\n\r\n            return call_user_func_array($mixin, $params);\r\n        }\r\n        else\r\n        {\r\n            throw new MethodException(\"The method $method does not exist\");\r\n        }\r\n    }\r\n\r\n    \/**\r\n     * Gets the name of the given object's class and returns it as a raw string.\r\n     *\r\n     * @author Yorick Peterse\r\n     * @since  0.1\r\n     * @param  object $object The object from which to get the class name.\r\n     * @access private\r\n     * @return string\r\n     *\/\r\n    private static function get_class($object = NULL)\r\n    {\r\n        if ( $object === NULL )\r\n        {\r\n            $class = get_class();\r\n        }\r\n        else\r\n        {\r\n            $class = get_class($object);\r\n        }\r\n\r\n        \/\/ $this contains the full name including the namespace\r\n        $namespace = explode('\\\\', $class);\r\n        $index     = count($namespace) - 1;\r\n\r\n        return $namespace[$index];\r\n    }\r\n}","description":"A few days ago I decided to see how difficult it would be to implement a proper OO model in PHP similar to how languages such as Python and Ruby do it. One of the possibilities these languages typically offer besides types being objects (e.g. Array, String, etc) is the ability to use \"mixins\". Mixins allow you to \"import\" methods from a certain location into a class. A useful example would be a plugin system where individual plugin methods are mixed into the main class. A short Ruby example would look like the following:\r\n\r\n    module MyMixins\r\n      def hello_world\r\n        return \"Hello, world!\"\r\n      end\r\n    end\r\n\r\n    class MyClass\r\n      include MyMixins\r\n\r\n      def test\r\n        puts hello_world\r\n      end\r\n    end\r\n\r\nThis feature isn't available in PHP but will be introduced in 5.4 under the name \"traits\" (so much for sticking with common naming conventions). The class above is a base class for other objects (e.g. a File class, SSH class, etc) that allows you to use a mixins like system in PHP 5.3. While it's a bit of a hack it does allow you to do cool stuff like the following:\r\n\r\n    <?php\r\n    $obj = new _Object();\r\n    _Object::implement('foobar', function()\r\n    {\r\n        return \"Foobar!\";\r\n    });\r\n\r\n    echo $obj->foobar();\r\n\r\nThe nice thing about this code is that it affects both existing instances as well as new ones plus you can mix in entire objects.\r\n\r\n**Note:** The prefix for the Object class (an underscore) is used to prevent PHP from soiling it's pants. Reserved keywords such as \"array\" and \"class\" are case insensitive and thus PHP treats \"object\" the same as \"Object\".","formatted_content":"\n<p>&lt;?php<\/p>\n<p>namespace OOPHP;<\/p>\n<p>use OOPHP\\Exception\\ArgumentException; use\nOOPHP\\Exception\\MethodException;<\/p>\n<p>\/** * Base class that should be extended by all other classes.\nThis class isn't really useful * on it's own but provides a few\ncommon methods that can be used by sub classes. * * One of the most\nimportant and most interesting features provided by this class is\nthe * ability to use mixins that affect both new and existing\ninstances of the class. For * more information on this see\nOOPHP_Object::implement(). * * <a href=\"\/people\/author\">@author<\/a>\nYorick Peterse * <a href=\"\/people\/since\">@since<\/a> 0.1 *\/ class\n_Object { \/** * Associative array containing all the objects and\nfunctions that have to be * implemented (also known as mixins) into\nevery instance. * * <a href=\"\/people\/author\">@author<\/a> Yorick\nPeterse * <a href=\"\/people\/since\">@since<\/a> 0.1 * <a href=\n\"\/people\/access\">@access<\/a> private * <a href=\n\"\/people\/var\">@var<\/a> array *\/ private static $mixins =\narray();<\/p>\n<div class=\"code inline\">\n<pre class=\"prettyprint\">\n\/**\n * Implements the given object or function into the the class itself. This affects \n * both existing instances as well as new ones.\n *\n * @example\n *  OOPHP\\_Object::implement('upcase', function($instance)\n *  {\n *      return strtoupper($instance-&gt;value);\n *  });\n *\n * @author  Yorick Peterse\n * @since   0.1\n * @acccess public\n * @param   object|string $name If set to a string this variable will be used as the\n * name when importing a closure. If it's an object all it's methods will be mixed\n * into every instance of this class.\n * @param   Closure $closure If specified this closure will be stored in \n * self::$mixins using the name specified in $name. This variable is ignored if \n * $name is an object. The first argument of this closure will always be a reference \n * to the instance of the class that called it.\n * @trow    OOPHP\\Exception\\ArgumentException Thrown whenever a closure was missing \n * and no object was specified as the first parameter.\n *\/\npublic static function implement($name, $closure = NULL)\n{\n    $class = self::get_class();\n\n    if ( !isset(self::$mixins[$class]) )\n    {\n        self::$mixins[$class] = array();\n    }\n\n    if ( is_object($name) )\n    {\n        foreach ( get_class_methods($name) as $method )\n        {\n            self::$mixins[$class][$method] = $name;\n        }\n    }\n    else\n    {\n        if ( empty($closure) )\n        {\n            throw new ArgumentException(\"You need to specify a closure\");\n        }\n\n        self::$mixins[$class][$name] = $closure;\n    }\n}\n\n\/**\n * Returns the class name of the current instance.\n *\n * @author Yorick Peterse\n * @since  0.1\n * @access public\n * @return string\n *\/\npublic function class_name()\n{\n    return self::get_class($this);\n}\n\n\/**\n * Method that's executed when the called method didn't exist. This method will try to\n * see if there are any mixed in methods that match the called one and call those \n * instead. If no methods are found MethodException will be raised.\n *\n * @author Yorick Peterse\n * @since  0.1\n * @access public\n * @param  string $method The name of the method that was called.\n * @param  array $params An array of parameters that were sent to the method.\n * @return mixed\n * @throw  OOPHP\\Exception\\MethodException Thrown whenever the method wasn't mixed in \n * and didn't exist either.\n *\/\npublic function __call($method, $params)\n{\n    \/\/ Set the current instance as the first parameter. This allows closures to modify \n    \/\/ and use data from the instance.\n    $params = array_merge(array($this), $params);\n    $class  = self::get_class($this);\n\n    if ( isset(self::$mixins[$class][$method]) )\n    {\n        $mixin = self::$mixins[$class][$method];\n\n        \/\/ Closures are objects but can't be called as an instance of something\n        if ( is_object($mixin) AND strtolower(get_class($mixin)) !== 'closure' )\n        {\n            $mixin = array($mixin, $method);\n        }\n\n        return call_user_func_array($mixin, $params);\n    }\n    else\n    {\n        throw new MethodException(\"The method $method does not exist\");\n    }\n}\n\n\/**\n * Gets the name of the given object's class and returns it as a raw string.\n *\n * @author Yorick Peterse\n * @since  0.1\n * @param  object $object The object from which to get the class name.\n * @access private\n * @return string\n *\/\nprivate static function get_class($object = NULL)\n{\n    if ( $object === NULL )\n    {\n        $class = get_class();\n    }\n    else\n    {\n        $class = get_class($object);\n    }\n\n    \/\/ $this contains the full name including the namespace\n    $namespace = explode('\\\\', $class);\n    $index     = count($namespace) - 1;\n\n    return $namespace[$index];\n}\n<\/pre>\n<div class=\"raw\"><a target=\"_blank\" href=\n\"\/raw_code\/d66f4288ab51837cbef94db5d479bd0ff0f1d481\">Raw<\/a><\/div>\n<\/div>\n<p>}<\/p>\n\n","formatted_description":"\n<p>A few days ago I decided to see how difficult it would be to\nimplement a proper OO model in PHP similar to how languages such as\nPython and Ruby do it. One of the possibilities these languages\ntypically offer besides types being objects (e.g. Array, String,\netc) is the ability to use \"mixins\". Mixins allow you to \"import\"\nmethods from a certain location into a class. A useful example\nwould be a plugin system where individual plugin methods are mixed\ninto the main class. A short Ruby example would look like the\nfollowing:<\/p>\n<div class=\"code inline\">\n<pre class=\"prettyprint\">\nmodule MyMixins\n  def hello_world\n    return \"Hello, world!\"\n  end\nend\n\nclass MyClass\n  include MyMixins\n\n  def test\n    puts hello_world\n  end\nend\n<\/pre>\n<div class=\"raw\"><a target=\"_blank\" href=\n\"\/raw_code\/a744bfce6b181e5ac465a8d08cc74b8517e6be42\">Raw<\/a><\/div>\n<\/div>\n<p>This feature isn't available in PHP but will be introduced in\n5.4 under the name \"traits\" (so much for sticking with common\nnaming conventions). The class above is a base class for other\nobjects (e.g. a File class, SSH class, etc) that allows you to use\na mixins like system in PHP 5.3. While it's a bit of a hack it does\nallow you to do cool stuff like the following:<\/p>\n<div class=\"code inline\">\n<pre class=\"prettyprint\">\n&lt;?php\n$obj = new _Object();\n_Object::implement('foobar', function()\n{\n    return \"Foobar!\";\n});\n\necho $obj-&gt;foobar();\n<\/pre>\n<div class=\"raw\"><a target=\"_blank\" href=\n\"\/raw_code\/3187ec73b3c77b40703e0f1008dfa9e663b6e90d\">Raw<\/a><\/div>\n<\/div>\n<p>The nice thing about this code is that it affects both existing\ninstances as well as new ones plus you can mix in entire\nobjects.<\/p>\n<p><strong>Note:<\/strong> The prefix for the Object class (an\nunderscore) is used to prevent PHP from soiling it's pants.\nReserved keywords such as \"array\" and \"class\" are case insensitive\nand thus PHP treats \"object\" the same as \"Object\".<\/p>\n\n","like_count":"13","comment_count":"7","tag_string":"php,mixins,oop,php 5.3,traits","tags":["mixins","oop","php","php 5.3","traits"]},{"id":74450,"tiny_id":"LYA","post_type":"link","post_url":"http:\/\/forrst.com\/posts\/Use_BCrypt_Fool-LYA","created_at":"2011-04-13 09:58:17","updated_at":"2011-05-16 07:46:39","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"285","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Use BCrypt Fool!","url":"http:\/\/yorickpeterse.com\/articles\/use-bcrypt-fool","content":"","description":"Almost any application will eventually need to store a collection of passwords or another\r\ntype of data that has to be stored using a hashing algorithm. Blogs, forums, issue\r\ntrackers, they all need to store user data and these passwords. This article covers the\r\ncommon mistakes made when dealing with passwords and what you should use instead. In order\r\nto fully understand this article some basic knowledge of programming and computers is\r\nrequired, you should also know a bit about the common hashing algorithms such as MD5 and\r\nSHA1. [...]\r\n\r\nI was originally going to post this on Forrst but there happens to be a character limit and there's no decent category for \"stories\" or regular articles so I posted this on my blog.","formatted_content":"\n\n","formatted_description":"\n<p>Almost any application will eventually need to store a\ncollection of passwords or another type of data that has to be\nstored using a hashing algorithm. Blogs, forums, issue trackers,\nthey all need to store user data and these passwords. This article\ncovers the common mistakes made when dealing with passwords and\nwhat you should use instead. In order to fully understand this\narticle some basic knowledge of programming and computers is\nrequired, you should also know a bit about the common hashing\nalgorithms such as MD5 and SHA1. [...]<\/p>\n<p>I was originally going to post this on Forrst but there happens\nto be a character limit and there's no decent category for\n\"stories\" or regular articles so I posted this on my blog.<\/p>\n\n","like_count":"21","comment_count":"3","tag_string":"bcrypt,password,encryption,sha1,md5,securitym","tags":["bcrypt","encryption","md5","password","securitym","sha1"]},{"id":65668,"tiny_id":"tyC","post_type":"question","post_url":"http:\/\/forrst.com\/posts\/Ramaze_needs_YOU-tyC","created_at":"2011-03-07 10:41:33","updated_at":"2011-03-20 09:28:22","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"285","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Ramaze needs YOU!","url":"","content":"Ramaze is a Ruby framework that while generally underrated has a lot of potential. Compared to other Ruby frameworks it's probably the most Ruby-like framework as it does not enforce a new way of thinking and developing applications, instead it adds a lot of functionality to Rack and Ruby to make it easier to develop MVC based applications (although you don't have to stick to the MVC pattern). \r\n\r\nWhen looking at other frameworks, regardless of their language, I personally think Ramaze is the most flexible one out there. However, there is one big problem: we're not widely know. This issue is caused by multiple things but the two most important ones are relatively bad documentation and a website that isn't very informative when it comes to helping newcomers. While the documentation is something we've been discussing for quite some time and actually are working on it the website is something we need to let somebody else do. Not because we don't want to do it ourselves but because we're developers and not designers. So far I and several other Ramaze members (manveru, Pistos, etc) have had a few chat sessions and we agreed that the following has to be done regarding the website (ramaze.net)\r\n\r\n* The homepage should show a basic example about how to use Ramaze, a good example would be the website of Sinatra (sinatrarb.com)\r\n* A blog to keep people up to date with the latest Ramaze news\r\n* A showcase of Ramaze applications\r\n* A userguide, either in the form of a wiki or something else. Currently there's book.ramaze.net but it's unorganized and out of date\r\n\r\nBased on these ideas I made a few rough sketches which can be downloaded from [here](http:\/\/downloads.yorickpeterse.com\/files\/Ramaze%20Website.tar.gz). The homepage is probably the most important (as with any website).\r\n\r\nWhat we're looking for is a good designer who's willing to contribute to an open source project by designing the new website for Ramaze. I'm going to be honest with you, there's a good chance you won't earn a penny from it but keep this in mind: you're probably using open source software (Chromium, Firefox, etc) as well so you'd be a big hypocrite and a dick to say \"Meh, open source is for fags\". Other than that I might be willing to pay money for it based on the results but that's something we'll discuss once there's a better idea of how the design will look, how much time it will take and so on.\r\n\r\nWhat we're not looking for are 12 year old entrepreneurs who think that using a few gradients equals proper design. This may sound rude but I'm going to say it up front to prevent any misunderstandings. Now don't get me wrong, if you're young like me (I'm only 18 actually) this doesn't mean you're not welcome it's just that in general people below a certain age (usually 18-20) don't have enough real-life experience to know how to handle clients. I might have experience in coding but since I've only been doing it for a few years (5 or so) and only about a year on a professional basis I still don't fully get how to handle clients and such. To cut a long story short, here's the type of designer we're looking for:\r\n\r\n* Decent amount of experience, knowledge of the web is a big plus\r\n* Understanding of how open source projects work\r\n* Proper knowledge of color theories, we don't need pink + green\r\n* Well organized, I'm not going to wait 2 months for the design so don't bother replying if you feel that it's more important to teabag people in Halo than to finish that design you were supposed to finish 2 weeks ago\r\n\r\nDo note that you *don't* have to slice the design into HTML as we'll handle this ourselves, as rude as it may sound designers tend to have very limited knowledge of how to organize your HTML and CSS in a proper way. We're just looking for somebody to create the actual design.\r\n\r\nIn order to make your life easier here are some extra details about Ramaze:\r\n\r\n* The color scheme is red and gray mainly but other colors are welcome as long as they mix with the [logo](https:\/\/secure.gravatar.com\/avatar\/efb21e9eb7a8ced4c808086b77cd86d0?s=140)\r\n* Ramaze is an agnostic framework, this means you can use pretty much anything the way you want it without breaking things\r\n* The GitHub account is located [here](https:\/\/github.com\/ramaze)\r\n* Ramaze is mostly a community driven framework, while there are a few \"core\" contributors a lot of the code has been added by \"regulars\"\r\n\r\nIf there's anything else you need feel free to ask. I would prefer it if you would reply in this thread if you're interested rather than Emailing me, this makes it easier for others to see who's interested plus it's easier for me to share everything with the other Ramaze guys. If you insist on Emailing me my address is info [at] yorickpeterse [dot] com.\r\n\r\n**Notice**: technically job posts are only allowed when you promote them but promoting posts has been disabled so this isn't possible at this time.","description":"","formatted_content":"\n<p>Ramaze is a Ruby framework that while generally underrated has a\nlot of potential. Compared to other Ruby frameworks it's probably\nthe most Ruby-like framework as it does not enforce a new way of\nthinking and developing applications, instead it adds a lot of\nfunctionality to Rack and Ruby to make it easier to develop MVC\nbased applications (although you don't have to stick to the MVC\npattern).<\/p>\n<p>When looking at other frameworks, regardless of their language,\nI personally think Ramaze is the most flexible one out there.\nHowever, there is one big problem: we're not widely know. This\nissue is caused by multiple things but the two most important ones\nare relatively bad documentation and a website that isn't very\ninformative when it comes to helping newcomers. While the\ndocumentation is something we've been discussing for quite some\ntime and actually are working on it the website is something we\nneed to let somebody else do. Not because we don't want to do it\nourselves but because we're developers and not designers. So far I\nand several other Ramaze members (manveru, Pistos, etc) have had a\nfew chat sessions and we agreed that the following has to be done\nregarding the website (ramaze.net)<\/p>\n<ul>\n<li>The homepage should show a basic example about how to use\nRamaze, a good example would be the website of Sinatra\n(sinatrarb.com)<\/li>\n<li>A blog to keep people up to date with the latest Ramaze\nnews<\/li>\n<li>A showcase of Ramaze applications<\/li>\n<li>A userguide, either in the form of a wiki or something else.\nCurrently there's book.ramaze.net but it's unorganized and out of\ndate<\/li>\n<\/ul>\n<p>Based on these ideas I made a few rough sketches which can be\ndownloaded from <a href=\n\"http:\/\/downloads.yorickpeterse.com\/files\/Ramaze%20Website.tar.gz\"\ntarget=\"_blank\" class=\"external\">here<\/a>. The homepage is probably\nthe most important (as with any website).<\/p>\n<p>What we're looking for is a good designer who's willing to\ncontribute to an open source project by designing the new website\nfor Ramaze. I'm going to be honest with you, there's a good chance\nyou won't earn a penny from it but keep this in mind: you're\nprobably using open source software (Chromium, Firefox, etc) as\nwell so you'd be a big hypocrite and a dick to say \"Meh, open\nsource is for fags\". Other than that I might be willing to pay\nmoney for it based on the results but that's something we'll\ndiscuss once there's a better idea of how the design will look, how\nmuch time it will take and so on.<\/p>\n<p>What we're not looking for are 12 year old entrepreneurs who\nthink that using a few gradients equals proper design. This may\nsound rude but I'm going to say it up front to prevent any\nmisunderstandings. Now don't get me wrong, if you're young like me\n(I'm only 18 actually) this doesn't mean you're not welcome it's\njust that in general people below a certain age (usually 18-20)\ndon't have enough real-life experience to know how to handle\nclients. I might have experience in coding but since I've only been\ndoing it for a few years (5 or so) and only about a year on a\nprofessional basis I still don't fully get how to handle clients\nand such. To cut a long story short, here's the type of designer\nwe're looking for:<\/p>\n<ul>\n<li>Decent amount of experience, knowledge of the web is a big\nplus<\/li>\n<li>Understanding of how open source projects work<\/li>\n<li>Proper knowledge of color theories, we don't need pink +\ngreen<\/li>\n<li>Well organized, I'm not going to wait 2 months for the design\nso don't bother replying if you feel that it's more important to\nteabag people in Halo than to finish that design you were supposed\nto finish 2 weeks ago<\/li>\n<\/ul>\n<p>Do note that you <em>don't<\/em> have to slice the design into\nHTML as we'll handle this ourselves, as rude as it may sound\ndesigners tend to have very limited knowledge of how to organize\nyour HTML and CSS in a proper way. We're just looking for somebody\nto create the actual design.<\/p>\n<p>In order to make your life easier here are some extra details\nabout Ramaze:<\/p>\n<ul>\n<li>The color scheme is red and gray mainly but other colors are\nwelcome as long as they mix with the <a href=\n\"https:\/\/secure.gravatar.com\/avatar\/efb21e9eb7a8ced4c808086b77cd86d0?s=140\"\ntarget=\"_blank\" class=\"external\">logo<\/a><\/li>\n<li>Ramaze is an agnostic framework, this means you can use pretty\nmuch anything the way you want it without breaking things<\/li>\n<li>The GitHub account is located <a href=\n\"https:\/\/github.com\/ramaze\" target=\"_blank\" class=\n\"external\">here<\/a><\/li>\n<li>Ramaze is mostly a community driven framework, while there are\na few \"core\" contributors a lot of the code has been added by\n\"regulars\"<\/li>\n<\/ul>\n<p>If there's anything else you need feel free to ask. I would\nprefer it if you would reply in this thread if you're interested\nrather than Emailing me, this makes it easier for others to see\nwho's interested plus it's easier for me to share everything with\nthe other Ramaze guys. If you insist on Emailing me my address is\ninfo [at] yorickpeterse [dot] com.<\/p>\n<p><strong>Notice<\/strong>: technically job posts are only allowed\nwhen you promote them but promoting posts has been disabled so this\nisn't possible at this time.<\/p>\n\n","formatted_description":"\n\n","like_count":"3","comment_count":"10","tag_string":"ramaze,designer,user input,improvements,ruby","tags":["designer","improvements","ramaze","ruby","user input"]},{"id":50277,"tiny_id":"1ul","post_type":"question","post_url":"http:\/\/forrst.com\/posts\/Query_string_goodness_with_headers_and_Nginx-1ul","created_at":"2011-01-09 11:27:23","updated_at":"2011-01-09 11:27:34","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"285","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Query string goodness with headers and Nginx","url":"","content":"Recently @jwa moved his humble website to my VPS. One of the components he was moving was a Cloudapp-like service that could show\/download images, archives, etc. This setup was configured so that whenever somebody appended \"?download\" to the URL of a\r\ncertain file a Content-Disposition header would be triggered and the file would be downloaded. Trouble is, that was Apache and I don't run stinkin' Apache, I cruise in style with Nginx.\r\n\r\nI've spent an hour or two over the past 2 days trying to solve the problem as I couldn't get it to work but so far without luck. If there are any hardcore Nginx geeks I'd appreciate it if they could help me out. Basically a file should be downloaded when the following is matched:\r\n\r\n1. The file is in \/uploads (e.g \/uploads\/2011\/01\/midgets.png)\r\n2. The file has the query string segment \"?download\" (e.g. \/uploads\/2011\/01\/midgets.png?download)\r\n\r\nIf Nginx supported multiple if\/and\/or statements the following pseudo code would be used:\r\n\r\n    location \/uploads\r\n    {\r\n      root \/path\/to\/public_html\/uploads;\r\n      \r\n      if ( -f $request_filename && $query_string ~ \"(.*)\\?download\" )\r\n      {\r\n        add_header Content-Disposition \"attachement\";\r\n      }\r\n    }\r\n \r\nTrouble is, Nginx has no suport for &&, || (AND and OR) or if-statements within if statements, so I'm stuck. All help is appreciated!","description":"","formatted_content":"\n<p>Recently <a href=\"\/people\/jwa\">@jwa<\/a> moved his humble website\nto my VPS. One of the components he was moving was a Cloudapp-like\nservice that could show\/download images, archives, etc. This setup\nwas configured so that whenever somebody appended \"?download\" to\nthe URL of a certain file a Content-Disposition header would be\ntriggered and the file would be downloaded. Trouble is, that was\nApache and I don't run stinkin' Apache, I cruise in style with\nNginx.<\/p>\n<p>I've spent an hour or two over the past 2 days trying to solve\nthe problem as I couldn't get it to work but so far without luck.\nIf there are any hardcore Nginx geeks I'd appreciate it if they\ncould help me out. Basically a file should be downloaded when the\nfollowing is matched:<\/p>\n<ol>\n<li>The file is in \/uploads (e.g \/uploads\/2011\/01\/midgets.png)<\/li>\n<li>The file has the query string segment \"?download\" (e.g.\n\/uploads\/2011\/01\/midgets.png?download)<\/li>\n<\/ol>\n<p>If Nginx supported multiple if\/and\/or statements the following\npseudo code would be used:<\/p>\n<div class=\"code inline\">\n<pre class=\"prettyprint\">\nlocation \/uploads\n{\n  root \/path\/to\/public_html\/uploads;\n\n  if ( -f $request_filename &amp;&amp; $query_string ~ \"(.*)\\?download\" )\n  {\n    add_header Content-Disposition \"attachement\";\n  }\n}\n<\/pre>\n<div class=\"raw\"><a target=\"_blank\" href=\n\"\/raw_code\/fcbc9f3264ba40836a73bbc2d8072d7d11d59329\">Raw<\/a><\/div>\n<\/div>\n<p>Trouble is, Nginx has no suport for &amp;&amp;, || (AND and OR)\nor if-statements within if statements, so I'm stuck. All help is\nappreciated!<\/p>\n\n","formatted_description":"\n\n","like_count":"3","comment_count":"2","tag_string":"nginx,apache,configuraton,rewrite,query string","tags":["apache","configuraton","nginx","query string","rewrite"]},{"id":47896,"tiny_id":"0vJ","post_type":"link","post_url":"http:\/\/forrst.com\/posts\/Koi_a_kick_ass_micro_framework_for_PHP_5_3-0vJ","created_at":"2010-12-28 22:39:45","updated_at":"2011-02-17 00:19:06","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"285","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Koi - a kick-ass micro-framework for PHP 5.3","url":"https:\/\/github.com\/YorickPeterse\/koi","content":"","description":"Released this baby earlier tonight. It's a PHP micro-framework that takes full advantage of features provided by PHP 5.3 such as namespaces, interfaces, and so on. Since this is relatively new code not all the documentation is available yet but what's there should give you a good start. Here's an excerpt of the project's description:\r\n\r\n> Koi is a unique microframework written in PHP 5.3. Unlike most frameworks these days Koi isn't\r\n> a half-finished port of an existing framework (yes, I'm talking about all Sinatra forks in PHP).\r\n> Instead Koi provides features that take advantage of PHP, provides unlimited features and is _very_ fast. \r\n> \r\n> Koi has the following features:\r\n> \r\n> * Use the same code for both web and commandline applications\r\n> * Very good performance, the average \"Hello, world\" benchmark (as unrealistic as it is) executes in about 800 requests\/sec.\r\n> * Support for any template engine. Out of the box Koi supports plain PHP, Dwoo and Mustache. It's also very easy to add your own driver.\r\n> * No MVC or any other pattern, your free to choose whatever structure you like. This makes Koi very easy to use as a base for your own framework.\r\n\r\nAnd here's some example code:\r\n\r\n    <?php\r\n    require_once __DIR__ . '\/..\/lib\/koi.php';\r\n    \r\n    \/\/ Create our application\r\n    class Application extends Koi\\Application\r\n    {\r\n        public function index()\r\n        {\r\n            return \"Hello, world!\";\r\n        }\r\n        \r\n        public function not_found()\r\n        {\r\n            return array(\"The requested page could not be found\", 404);\r\n        }\r\n    }\r\n    \r\n    $app = new Application();\r\n    \r\n    $app->map('\/'    , 'index');\r\n    $app->map('\/:404', 'not_found');\r\n    $app->run();\r\n\r\nSo why the hell post this besides trying to increase my ROI, SEO and e-penis? Well, it just happens that I need people to test it. I want people to use it, comment about it, submit patches, the whole lot. Releasing a project is one thing but it's worthless without proper user feedback. So if you're a geek (or think you are one) please take your time to download a copy of Koi and test it and report your findings, it would help a lot.","formatted_content":"\n\n","formatted_description":"\n<p>Released this baby earlier tonight. It's a PHP micro-framework\nthat takes full advantage of features provided by PHP 5.3 such as\nnamespaces, interfaces, and so on. Since this is relatively new\ncode not all the documentation is available yet but what's there\nshould give you a good start. Here's an excerpt of the project's\ndescription:<\/p>\n<blockquote>\n<p>Koi is a unique microframework written in PHP 5.3. Unlike most\nframeworks these days Koi isn't a half-finished port of an existing\nframework (yes, I'm talking about all Sinatra forks in PHP).\nInstead Koi provides features that take advantage of PHP, provides\nunlimited features and is <em>very<\/em> fast.<\/p>\n<p>Koi has the following features:<\/p>\n<ul>\n<li>Use the same code for both web and commandline\napplications<\/li>\n<li>Very good performance, the average \"Hello, world\" benchmark (as\nunrealistic as it is) executes in about 800 requests\/sec.<\/li>\n<li>Support for any template engine. Out of the box Koi supports\nplain PHP, Dwoo and Mustache. It's also very easy to add your own\ndriver.<\/li>\n<li>No MVC or any other pattern, your free to choose whatever\nstructure you like. This makes Koi very easy to use as a base for\nyour own framework.<\/li>\n<\/ul>\n<\/blockquote>\n<p>And here's some example code:<\/p>\n<div class=\"code inline\">\n<pre class=\"prettyprint\">\n&lt;?php\nrequire_once __DIR__ . '\/..\/lib\/koi.php';\n\n\/\/ Create our application\nclass Application extends Koi\\Application\n{\n    public function index()\n    {\n        return \"Hello, world!\";\n    }\n\n    public function not_found()\n    {\n        return array(\"The requested page could not be found\", 404);\n    }\n}\n\n$app = new Application();\n\n$app-&gt;map('\/'    , 'index');\n$app-&gt;map('\/:404', 'not_found');\n$app-&gt;run();\n<\/pre>\n<div class=\"raw\"><a target=\"_blank\" href=\n\"\/raw_code\/8da6cffb805747d1528426d1435bd02ee60ba68a\">Raw<\/a><\/div>\n<\/div>\n<p>So why the hell post this besides trying to increase my ROI, SEO\nand e-penis? Well, it just happens that I need people to test it. I\nwant people to use it, comment about it, submit patches, the whole\nlot. Releasing a project is one thing but it's worthless without\nproper user feedback. So if you're a geek (or think you are one)\nplease take your time to download a copy of Koi and test it and\nreport your findings, it would help a lot.<\/p>\n\n","like_count":"43","comment_count":"24","tag_string":"php,php 5.3,micro,framework","tags":["framework","micro","php","php 5.3"]},{"id":46357,"tiny_id":"0e3","post_type":"link","post_url":"http:\/\/forrst.com\/posts\/Forrst_Meetup_in_The_Netherlands-0e3","created_at":"2010-12-20 21:46:30","updated_at":"2010-12-20 21:46:35","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"285","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Forrst Meetup in The Netherlands","url":"https:\/\/spreadsheets.google.com\/viewform?formkey=dFRJdy1zRE1PUV9ZckZjbV9SbVpzT2c6MQ","content":"","description":"For a possible meetup in the land of cheese and tulips I'd like to know some details before even thinking of organizing one. If you're from Holland (or willing to travel to Holland) please fill the form :)","formatted_content":"\n\n","formatted_description":"\n<p>For a possible meetup in the land of cheese and tulips I'd like\nto know some details before even thinking of organizing one. If\nyou're from Holland (or willing to travel to Holland) please fill\nthe form :)<\/p>\n\n","like_count":"8","comment_count":"7","tag_string":"meetup,meeting,holland,the netherlands","tags":["holland","meetup","the netherlands"]},{"id":37218,"tiny_id":"5GO","post_type":"link","post_url":"http:\/\/forrst.com\/posts\/Komodo_Color_Schemes-5GO","created_at":"2010-11-04 21:10:18","updated_at":"2010-11-05 00:01:42","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"285","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Komodo Color Schemes","url":"http:\/\/github.com\/YorickPeterse\/Komodo-IDE-Colors","content":"","description":"Wow, what's that? An (upcoming) collection of color schemes for Komodo IDE (and Komodo Edit)? Yes, that's right.\n\nI started using Komodo IDE about a day or two again and while it is a really great editor it lacks a decent set of color schemes. While there are a few ported schemes such as Monokai, Twilight and several others. The problem however was that most of these themes only supported a very small amount of languages. For example, the Twilight theme didn't properly support HTML and CSS.\n\nBecause of all that I decided to create my own set of color schemes and make them available for download. So far there's only 1 theme called \"Autumn\" but I'll be making more in the future.\n\n## Autumn\n\n![Preview of Autumn](https:\/\/github.com\/YorickPeterse\/Komodo-IDE-Colors\/raw\/master\/Autumn\/screenshot.jpg)","formatted_content":"\n\n","formatted_description":"\n<p>Wow, what's that? An (upcoming) collection of color schemes for\nKomodo IDE (and Komodo Edit)? Yes, that's right.<\/p>\n<p>I started using Komodo IDE about a day or two again and while it\nis a really great editor it lacks a decent set of color schemes.\nWhile there are a few ported schemes such as Monokai, Twilight and\nseveral others. The problem however was that most of these themes\nonly supported a very small amount of languages. For example, the\nTwilight theme didn't properly support HTML and CSS.<\/p>\n<p>Because of all that I decided to create my own set of color\nschemes and make them available for download. So far there's only 1\ntheme called \"Autumn\" but I'll be making more in the future.<\/p>\n<h2>Autumn<\/h2>\n<p><img src=\n\"https:\/\/github.com\/YorickPeterse\/Komodo-IDE-Colors\/raw\/master\/Autumn\/screenshot.jpg\"\nalt=\"Preview of Autumn\"><\/p>\n\n","like_count":"11","comment_count":"5","tag_string":"colors, themes, komodo, color schemes, komodo edit, syntax highlight","tags":["color schemes","colors","komodo","komodo edit","syntax highlight","themes"]},{"id":27224,"tiny_id":"hyX","post_type":"snap","post_url":"http:\/\/forrst.com\/posts\/Untitled-hyX","created_at":"2010-09-22 17:07:07","updated_at":"2010-09-22 17:11:51","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"285","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Untitled","url":"","content":"","description":"Currently Forrst is using Markdown in order to format comments, questions, snaps, etc. While Markdown itself is nice it does have a few flaws.\n\nFor example, if I were to post some code I have to indent everything with 4 spaces. I could open Textmate, set it to use soft tabs with a size of 4 spaces and paste the code. Then I have to indent it, copy it and paste it back into Forrst. Ofcourse this isn't very nice and since by default browsers don't support indentation using tabs in textareas (give it a try) that won't work either.\n\nTextile on the other hand uses the following format:\n\n<pre class=\"prettyprint\">\nbc.\nclass SomeController\n    def method\n        # Do something in Ruby....\n    end\nend\n\n<\/pre>\n\nOfcourse codeblocks aren't the main reason why I'd love to see Textile, in general I prefer Textile as it feels more natural than writing Markdown. Below are a few examples to show the differences between the two markup languages.\n\n## URLs\n\nURLs look pretty much the same in both Markdown and Textile, the latter one just looks less ugly.\n\nMarkdown\n<pre class=\"prettyprint\">\n[Google Website](http:\/\/www.google.com\/)\n<\/pre>\n\nTextile\n<pre class=\"prettyprint\">\n\"Google Website\":http:\/\/www.google.com\/\n<\/pre>\n\n## Headings\n\nWhile Markdown uses less characters Textile is a bit easier to use.\"h1.\" is much easier to remember than \"#\" (your opinion may be different).\n\nMarkdown\n<pre class=\"prettyprint\">\nH1: #\nH2: ##\nH3: ###\n<\/pre>\n\nTextile (note the dots)\n<pre class=\"prettyprint\">\nH1: h1.\nH2: h2.\nH3: h3.\n<\/pre>\n\nThese are only a few examples. In some cases Markdown's syntax is better than Textile while in other cases it's the other way around. Therefore it would be nice to have a dropdown box that let's you choose your desired format (take a look at the screenshot).\n\n## NOTE\n\nI know there's a fancy feedback button but I want some community feedback first.","formatted_content":"\n\n","formatted_description":"\n<p>Currently Forrst is using Markdown in order to format comments,\nquestions, snaps, etc. While Markdown itself is nice it does have a\nfew flaws.<\/p>\n<p>For example, if I were to post some code I have to indent\neverything with 4 spaces. I could open Textmate, set it to use soft\ntabs with a size of 4 spaces and paste the code. Then I have to\nindent it, copy it and paste it back into Forrst. Ofcourse this\nisn't very nice and since by default browsers don't support\nindentation using tabs in textareas (give it a try) that won't work\neither.<\/p>\n<p>Textile on the other hand uses the following format:<\/p>\n<pre class=\"prettyprint\">\nbc.\nclass SomeController\n    def method\n        # Do something in Ruby....\n    end\nend\n\n<\/pre>\n<p>Ofcourse codeblocks aren't the main reason why I'd love to see\nTextile, in general I prefer Textile as it feels more natural than\nwriting Markdown. Below are a few examples to show the differences\nbetween the two markup languages.<\/p>\n<h2>URLs<\/h2>\n<p>URLs look pretty much the same in both Markdown and Textile, the\nlatter one just looks less ugly.<\/p>\n<p>Markdown<\/p>\n<pre class=\"prettyprint\">\n[Google Website](http:\/\/www.google.com\/)\n<\/pre>\n<p>Textile<\/p>\n<pre class=\"prettyprint\">\n\"Google Website\":http:\/\/www.google.com\/\n<\/pre>\n<h2>Headings<\/h2>\n<p>While Markdown uses less characters Textile is a bit easier to\nuse.\"h1.\" is much easier to remember than \"#\" (your opinion may be\ndifferent).<\/p>\n<p>Markdown<\/p>\n<pre class=\"prettyprint\">\nH1: #\nH2: ##\nH3: ###\n<\/pre>\n<p>Textile (note the dots)<\/p>\n<pre class=\"prettyprint\">\nH1: h1.\nH2: h2.\nH3: h3.\n<\/pre>\n<p>These are only a few examples. In some cases Markdown's syntax\nis better than Textile while in other cases it's the other way\naround. Therefore it would be nice to have a dropdown box that\nlet's you choose your desired format (take a look at the\nscreenshot).<\/p>\n<h2>NOTE<\/h2>\n<p>I know there's a fancy feedback button but I want some community\nfeedback first.<\/p>\n\n","like_count":"2","comment_count":"6","tag_string":"forrst, markdown, draft, textile, format","tags":["draft","format","forrst","markdown","textile"],"snaps":{"mega_url":"http:\/\/forrst-production.s3.amazonaws.com\/posts\/snaps\/27224\/mega.png?1285175227","keith_url":"http:\/\/forrst-production.s3.amazonaws.com\/posts\/snaps\/27224\/keith.png?1285175227","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/posts\/snaps\/27224\/large.png?1285175227","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/posts\/snaps\/27224\/medium.png?1285175227","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/posts\/snaps\/27224\/small.png?1285175227","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/posts\/snaps\/27224\/thumb.png?1285175227","original_url":"http:\/\/forrst-production.s3.amazonaws.com\/posts\/snaps\/27224\/original.png?1285175227"}},{"id":11968,"tiny_id":"ehi","post_type":"question","post_url":"http:\/\/forrst.com\/posts\/Forrst_summer_camp-ehi","created_at":"2010-07-17 12:28:06","updated_at":"2010-07-17 12:28:15","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"285","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Forrst summer camp","url":"","content":"Presentations, workshops, drinks around a campfire. How does that sound?\n\nPersonally I think this would be rather awesome, especially the fire would suit the whole outdoors theme of Forrst.","description":"","formatted_content":"\n<p>Presentations, workshops, drinks around a campfire. How does\nthat sound?<\/p>\n<p>Personally I think this would be rather awesome, especially the\nfire would suit the whole outdoors theme of Forrst.<\/p>\n\n","formatted_description":"\n\n","like_count":"23","comment_count":"19","tag_string":"forrst, conference, meetings","tags":["conference","forrst","meetings"]}],"stat":"ok","in":0.4158,"authed":false,"authed_as":false,"env":"prod"}
