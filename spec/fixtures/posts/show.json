{"resp":{"id":86427,"tiny_id":"YPj","post_type":"link","post_url":"http:\/\/forrst.com\/posts\/Forrst_API_in_Ruby-YPj","created_at":"2011-06-05 01:28:36","updated_at":"2011-06-05 01:42:46","user":{"id":6998,"username":"YorickPeterse","name":"Yorick Peterse","url":"http:\/\/forrst.com\/people\/YorickPeterse","posts":"33","comments":"286","likes":"422","followers":"115","following":"55","photos":{"xl_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/xl.jpg?1279874037","large_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/large.jpg?1279874037","medium_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/medium.jpg?1279874037","small_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/small.jpg?1279874037","thumb_url":"http:\/\/forrst-production.s3.amazonaws.com\/users\/photos\/6998\/thumb.jpg?1279874037"},"bio":"\n<p>Yorick is my name, being a geek is my game. I currently work for\n<a href=\"http:\/\/isset.nl\" target=\"_blank\" class=\n\"external\">Isset<\/a> where I spend most of my time coding in PHP,\nCodeigniter and Javascript. In my spare time I work with Ruby,\nJavascript (Mootools mostly) and develop with <a href=\n\"http:\/\/ramaze.net\/\" target=\"_blank\" class=\n\"external\">Ramaze<\/a><\/p>\n\n","is_a":"developer","homepage_url":"http:\/\/yorickpeterse.com\/","twitter":"YorickPeterse","in_directory":true,"tag_string":"developer,ramaze,codeigniter,ruby,mootools"},"published":true,"public":true,"title":"Forrst API in Ruby","url":"https:\/\/github.com\/YorickPeterse\/Forrst","content":"","description":"With the recent announcement of the API I figured I had to join the party as well and decided to start working on a Ruby implementation. The idea of this implementation is that it should focus on stability, support for all popular Ruby distributions (JRuby, Rubinius, etc) and most important of all: it should be easy to use. The latter means that rather than having some crappy wrapper around a JSON response you'll end up with an implementation that looks vaguely like [Sequel][sequel] or other DBM toolkits.\r\n\r\nCurrently not a lot is working, in fact you can only retrieve a user, but below are a few examples of how you'll be using the library once it's fully operational.\r\n\r\n    require 'forrst'\r\n\r\n    # Forrst::User.find(1) is also perfectly fine if you happen to know the ID\r\n    kyle = Forrst::User.find('kyle')\r\n\r\n    kyle.post_count # => 426\r\n    kyle.developer? # => true\r\n    \r\n    kyle.posts.each do |post|\r\n      puts post.title\r\n    end\r\n\r\n    Forrst::Post.find(:code, :sort => :recent, :page => 1).each do |post|\r\n      puts post.title\r\n    end\r\n\r\nThere are a few important things to remember before you're going nuts and try to use the gem. First of all it's not doing a lot at this moment besides retrieving a user. Second, I'll most likely change quite a bit in the coming days as OAuth authentication will be enabled, SSL will be used and so on. Last but not least, don't bother suggestion feature X, Y or Z as at this point I'm still designing (no, I don't use Photoshop) the structure of the code and how to use it.\r\n\r\nNevertheless it's worth a look, the project can be found by clicking the link of this article (hint: it's at the top).\r\n\r\n[sequel]: http:\/\/sequel.rubyforge.org\/\r\n\r\np.s. Yes, I have permission of Kyle to use the name \"forrst\" ;)","formatted_content":"\n\n","formatted_description":"\n<p>With the recent announcement of the API I figured I had to join\nthe party as well and decided to start working on a Ruby\nimplementation. The idea of this implementation is that it should\nfocus on stability, support for all popular Ruby distributions\n(JRuby, Rubinius, etc) and most important of all: it should be easy\nto use. The latter means that rather than having some crappy\nwrapper around a JSON response you'll end up with an implementation\nthat looks vaguely like <a href=\"http:\/\/sequel.rubyforge.org\/\"\ntarget=\"_blank\" class=\"external\">Sequel<\/a> or other DBM\ntoolkits.<\/p>\n<p>Currently not a lot is working, in fact you can only retrieve a\nuser, but below are a few examples of how you'll be using the\nlibrary once it's fully operational.<\/p>\n<div class=\"code inline\">\n<pre class=\"prettyprint\">\nrequire 'forrst'\n\n# Forrst::User.find(1) is also perfectly fine if you happen to know the ID\nkyle = Forrst::User.find('kyle')\n\nkyle.post_count # =&gt; 426\nkyle.developer? # =&gt; true\n\nkyle.posts.each do |post|\n  puts post.title\nend\n\nForrst::Post.find(:code, :sort =&gt; :recent, :page =&gt; 1).each do |post|\n  puts post.title\nend\n<\/pre>\n<div class=\"raw\"><a target=\"_blank\" href=\n\"\/raw_code\/fe8a4edebba4668555639004b9f1192891049028\">Raw<\/a><\/div>\n<\/div>\n<p>There are a few important things to remember before you're going\nnuts and try to use the gem. First of all it's not doing a lot at\nthis moment besides retrieving a user. Second, I'll most likely\nchange quite a bit in the coming days as OAuth authentication will\nbe enabled, SSL will be used and so on. Last but not least, don't\nbother suggestion feature X, Y or Z as at this point I'm still\ndesigning (no, I don't use Photoshop) the structure of the code and\nhow to use it.<\/p>\n<p>Nevertheless it's worth a look, the project can be found by\nclicking the link of this article (hint: it's at the top).<\/p>\n<p>p.s. Yes, I have permission of Kyle to use the name \"forrst\"\n;)<\/p>\n\n","like_count":"11","comment_count":"0","tag_string":"forrst api,api,ruby,forrst,jruby,rubin","tags":["api","forrst","forrst api","JRuby","rubin","ruby"]},"stat":"ok","in":0.0916,"authed":false,"authed_as":false,"env":"prod"}
